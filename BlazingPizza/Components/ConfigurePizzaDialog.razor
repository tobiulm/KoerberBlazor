@inject PizzaStoreContext Db
<div class="dialog-container">
    <div class="dialog">
        <div class="dialog-title">
            <h2>
                @Pizza.Special?.Name
            </h2>
            @Pizza.Special?.Description
        </div>
        <form class="dialog-body">
            <div>
                <label>
                    Size:
                </label>
                <input type="range" min="@Pizza.MinimumSize" max="@Pizza.MaximumSize" step="1" @bind="Pizza.Size" @bind:event="oninput" />
                <span class="size-label">
                    @(Pizza.Size)cm (@(Pizza.GetFormattedTotalPrice())€)
                </span>
            </div>
            <div>
                <label>
                    Extra Toppings:
                </label>
                @if (_toppings is null)
                {
                    <select class="custom-select" disbaled>
                        <option>(loading...)</option>
                    </select>
                }
                else if (Pizza.Toppings.Count >= 6)
                {
                    <div>(maximum reached)</div>
                }
                else
                {
                    <select class="custom-select" @onchange="ToppingSelected">
                        <option value="-1" disbaled selected>(select)</option>
                        @for (var i = 0; i < _toppings.Count; i++)
                        {
                            <option value="@i">
                                @_toppings[i].Name - (@(_toppings[i].GetFormattedPrice())€)
                            </option>
                        }
                    </select>
                }
            </div>
            <div class="toppings">
                @foreach (var topping in Pizza.Toppings)
                {
                    if (topping?.Topping is not null)
                    {
                        <div class="topping">
                            @topping?.Topping.Name
                            <span class="topping-price">
                                @topping?.Topping.GetFormattedPrice()
                            </span>
                            <button type="button" class="delete-topping" @onclick="(() => RemoveTopping(topping?.Topping))">
                                x
                            </button>
                        </div>
                    }
                }
            </div>
        </form>
        <div class="dialog-buttons">
            <button class="btn btn-secondary me-auto" @onclick="OnCancel">
                Cancel
            </button>
            <span class="me-center">
                Price: <span class="price">@(Pizza.GetFormattedTotalPrice())</span>
            </span>
            <button class="btn btn-success ms-auto" @onclick="OnConfirm">
                Order
            </button>
        </div>
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public Pizza Pizza { get; set; } = new();

    List<Topping> _toppings = null!;

    [Parameter, EditorRequired]
    public EventCallback OnCancel { get; set; }

    [Parameter, EditorRequired]
    public EventCallback OnConfirm { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _toppings = await Db.Toppings.OrderBy(t => t.Name).ToListAsync();
    }

    private void AddTopping(Topping topping)
    {
        if (_toppings is null) return;
        if (Pizza.Toppings.Find(pt => pt.Topping == topping) is null)
        {
            Pizza.Toppings.Add(new PizzaTopping() { Topping = topping });
        }
    }

    private void RemoveTopping(Topping topping)
    {
        Pizza.Toppings.RemoveAll(pt => pt.Topping == topping);
    }

    private void ToppingSelected(ChangeEventArgs e)
    {
        if (int.TryParse((string?)e.Value, out var index) && index >= 0)
        {
            AddTopping(_toppings[index]);
        }
    }
}