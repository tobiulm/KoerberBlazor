@page "/"
@rendermode InteractiveServer
@inject PizzaStoreContext Db

<PageTitle>Blazing Pizza</PageTitle>

<div class="main">
    <ul class="pizza-cards">
        @if(_specials != null)
        {
            @foreach(var special in _specials)
            {
                <li @onclick="@(() => ShowConfigurePizzaDialog(special))" style="background-image: url('@special.ImageUrl')">
                    <div class="pizza-info">
                        <span class="title">
                            @special.Name
                        </span>
                        @special.Description
                        <span class="price">
                            @special.GetFormattedBasePrice()
                        </span>
                    </div>
                </li>
            }
        }
        else
        {
            <text>Loading...</text>
        }
    </ul>
</div>

@if(showingConfigureDialog)
{
    <ConfigurePizzaDialog Pizza="configuringPizza" OnCancel="CancelConfigurePizzaDialog" OnConfirm="ConfirmPizzaConfigureDialog"></ConfigurePizzaDialog>
}

@code{
    List<PizzaSpecial>? _specials;
    Pizza? configuringPizza;
    bool showingConfigureDialog;
    Order order = new Order();

    protected override async Task OnInitializedAsync()
    {
        _specials = await Db.Specials.ToListAsync();
    }

    private void ShowConfigurePizzaDialog(PizzaSpecial special)
    {
        configuringPizza = new Pizza()
        {
            Special = special,
            SpecialId = special.Id,
            Size = Pizza.DefaultSize,
            Toppings = new List<PizzaTopping>()
        };

        showingConfigureDialog = true;
    }

    private void CancelConfigurePizzaDialog()
    {
        configuringPizza = null;
        showingConfigureDialog = false;
    }

    private void ConfirmPizzaConfigureDialog()
    {
        if(configuringPizza is not null)
        {
            order.Pizzas.Add(configuringPizza);
            configuringPizza = null;
        }
        showingConfigureDialog = false;
    }
}