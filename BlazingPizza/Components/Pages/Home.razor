@page "/"
@rendermode InteractiveServer
@implements IDisposable
@inject PizzaStoreContext Db
@inject NavigationManager NavigationManager
@inject OrdersService OrdersService
@inject OrderState OrderState

<PageTitle>Blazing Pizza</PageTitle>

<div class="main">
    <ul class="pizza-cards">
        @if (_specials != null)
        {
            @foreach (var special in _specials)
            {
                <li @onclick="@(() => ShowConfigurePizzaDialog(special))" style="background-image: url('@special.ImageUrl')">
                    <div class="pizza-info">
                        <span class="title">
                            @special.Name
                        </span>
                        @special.Description
                        <span class="price">
                            @special.GetFormattedBasePrice()
                        </span>
                    </div>
                </li>
            }
        }
        else
        {
            <text>Loading...</text>
        }
    </ul>
</div>

@if (OrderState.Order.Pizzas.Any())
{
    <div class="sidebar">
        <div class="order-contents">
            <h2>
                Your order
            </h2>
            @foreach(var configuredPizza in OrderState.Order.Pizzas)
            {
                <ConfiguredPizzaItem Pizza="configuredPizza" OnRemoved="@(() => RemoveConfiguredPizza(configuredPizza))" />
            }
        </div>
        <div class="order-total">
            Total:
            <span class="total-price">
                @OrderState.Order.GetFormattedTotalPrice()
            </span>
            <button class="btn btn-warning" disabled="@(OrderState.Order.Pizzas.Count==0)" @onclick="PlaceOrder" >
                Order
            </button>
        </div>
    </div>
}


@if (OrderState.ShowingConfigureDialog)
{
    <ConfigurePizzaDialog Pizza="OrderState.ConfiguringPizza" OnCancel="CancelConfigurePizzaDialog" OnConfirm="ConfirmPizzaConfigureDialog"></ConfigurePizzaDialog>
}

@code {
    List<PizzaSpecial>? _specials;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        OrderState.OnChange += StateHasChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        _specials = await Db.Specials.ToListAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await OrderState.LoadStateAsync();
            StateHasChanged();
        }
    }

    private void ShowConfigurePizzaDialog(PizzaSpecial special)
    {
        OrderState.ConfiguringPizza = new Pizza()
        {
            Special = special,
            SpecialId = special.Id,
            Size = Pizza.DefaultSize,
            Toppings = new List<PizzaTopping>()
        };

        OrderState.ShowingConfigureDialog = true;
    }

    private void CancelConfigurePizzaDialog()
    {
        OrderState.ShowingConfigureDialog = false;
    }

    private async Task ConfirmPizzaConfigureDialog()
    {
        if (OrderState.ConfiguringPizza is not null)
        {
            OrderState.Order.Pizzas.Add(OrderState.ConfiguringPizza);
            OrderState.ShowingConfigureDialog = false;
            OrderState.ConfiguringPizza = null;
            await OrderState.SaveStateAsync();
        }
    }

    private async Task RemoveConfiguredPizza(Pizza pizza)
    {
        await OrderState.RemoveConfiguredPizzaItem(pizza);
    }

    private async Task PlaceOrder()
    {
        // int newOrderId = await OrdersService.PlaceOrder(OrderState.Order);
        // await OrderState.ResetOrder();
        NavigationManager.NavigateTo("/checkout");
    }

    public void Dispose()
    {
        OrderState.OnChange -= StateHasChanged;
    }
}